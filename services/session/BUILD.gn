# Copyright (C) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

group("avession_server") {
  deps = [
    ":avsession_service",
    "//foundation/multimedia/av_session/sa_profile:avsession_sa_profile",
    "//foundation/multimedia/av_session/services/etc:avsession_service.rc",
  ]
}

ohos_shared_library("avsession_service") {
  install_enable = true

  common_source = [
    "../../frameworks/innerkitsimpl/native/session/src/avmeta_data.cpp",
    "../../frameworks/innerkitsimpl/native/session/src/avsession_descriptor.cpp",
    "../../frameworks/innerkitsimpl/native/session/src/avplayback_state.cpp",
    "../../frameworks/innerkitsimpl/native/session/src/avcontrol_command.cpp",
  ]

  ipc_sources = [
    "ipc/avcontroller_callback_proxy.cpp",
    "ipc/avsession_callback_proxy.cpp",
    "ipc/avsession_callback_stub.cpp",
    "ipc/avsession_controller_stub.cpp",
    "ipc/avsession_service_stub.cpp",
    "ipc/avsession_stub.cpp",
    "ipc/session_listener_proxy.cpp",
  ]

  service_sources = [
    "server/avcontroller_item.cpp",
    "server/avsession_item.cpp",
    "server/avsession_service.cpp",
    "server/session_stack.cpp",
  ]

  adapter_sources = [
    "adapter/distributed_object_adapter.cpp",
    "adapter/key_event_adapter.cpp",
  ]

  sources = common_source + ipc_sources + adapter_sources + service_sources

  include_dirs = [
    "//foundation/multimedia/av_session/services/session/ipc/include",
    "//foundation/multimedia/av_session/services/session/adapter",
    "//foundation/multimedia/av_session/interfaces/innerkits/native/session/include",
    "//foundation/multimedia/av_session/frameworks/innerkitsimpl/native/session/include",
    "//utils/native/base/include",
  ]

  deps = [
    "//foundation/multimedia/av_session/frameworks/innerkitsimpl/native/session:avsession_client",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:wantagent_innerkits",
    "distributeddataobject:distributeddataobject_impl",
    "hiviewdfx_hilog_native:libhilog",
    "input:libmmi-client",
    "ipc:ipc_core",
    "multimedia_image_standard:image_native",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
  ]

  subsystem_name = "multimedia"
  part_name = "multimedia_av_session"
}