# Copyright (c) 2022-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../../av_session_ohos_sources.gni")
import("../../../castplus_cast_engine_part.gni")
import("../../../config.gni")

config("avsession_client_config") {
  include_dirs = [
    "include",
    "../../../interfaces/inner_api/native/session/include",
    "../../../services/session/ipc/base",
    "../../../services/session/ipc/proxy",
    "../../../services/session/ipc/stub",
  ]
}

av_session_ohos_library("avsession_client") {
  install_enable = true
  deps = []
  ipc_sources = [
    "../../../services/session/ipc/proxy/avsession_controller_proxy.cpp",
    "../../../services/session/ipc/proxy/avsession_proxy.cpp",
    "../../../services/session/ipc/proxy/avsession_service_proxy.cpp",
  ]

  client_sources = [
    "src/avcontroller_callback_client.cpp",
    "src/avsession_callback_client.cpp",
    "src/avsession_manager.cpp",
    "src/avsession_manager_impl.cpp",
    "src/session_listener_client.cpp",
  ]

  common_sources = [
    "../../../frameworks/common/src/av_cast_info.cpp",
    "../../../frameworks/common/src/av_data_src_descriptor.cpp",
    "../../../frameworks/common/src/av_file_descriptor.cpp",
    "../../../frameworks/common/src/av_shared_memory_base.cpp",
    "../../../frameworks/common/src/avcall_meta_data.cpp",
    "../../../frameworks/common/src/avcall_state.cpp",
    "../../../frameworks/common/src/avcast_control_command.cpp",
    "../../../frameworks/common/src/avcast_player_state.cpp",
    "../../../frameworks/common/src/avcontrol_command.cpp",
    "../../../frameworks/common/src/avmedia_description.cpp",
    "../../../frameworks/common/src/avmeta_data.cpp",
    "../../../frameworks/common/src/avplayback_state.cpp",
    "../../../frameworks/common/src/avqueue_info.cpp",
    "../../../frameworks/common/src/avqueue_item.cpp",
    "../../../frameworks/common/src/avsession_descriptor.cpp",
    "../../../frameworks/common/src/avsession_pixel_map.cpp",
    "../../../frameworks/common/src/media_info.cpp",
    "../../../frameworks/common/src/media_info_holder.cpp",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = ipc_sources + client_sources + common_sources

  public_configs = [
    ":avsession_client_config",
    "../../../services/session:avsession_ipc_config",
  ]

  deps = [
    "../../common:avsession_common",
    "../../../services/session:libidl_avsession_service_interface_stub",
    "../../../services/session:libidl_avsession_service_interface_proxy",
    "../../../utils:avsession_utils",
    "../session:avsession_cast_client",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:wantagent_innerkits",
    "audio_framework:audio_foundation",
    "c_utils:utils",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  cflags = []

  if (castplus_cast_engine_enable) {
    cflags += [ "-DCASTPLUS_CAST_ENGINE_ENABLE" ]
  }

  if (multimedia_av_session_enable_trace_control) {
    cflags += [ "-DENBABLE_AVSESSION_TRACE_CONTROL" ]
    external_deps += [ "hitrace:hitrace_meter" ]
  }
  if (multimedia_av_session_enable_sysevent_control) {
    cflags += [ "-DENABLE_AVSESSION_SYSEVENT_CONTROL" ]
    external_deps += [ "hisysevent:libhisysevent" ]
  }

  if (av_session_enable_start_stop_on_demand) {
    cflags += [ "-DSTART_STOP_ON_DEMAND_ENABLE" ]
  }

  innerapi_tags = [ "platformsdk" ]
  subsystem_name = "multimedia"
  part_name = "av_session"
}

ohos_shared_library("avsession_cast_client") {
  install_enable = true
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  ipc_sources = [
    "../../../services/session/ipc/proxy/avcast_controller_proxy.cpp",
  ]

  client_sources = [ "src/avcast_controller_callback_client.cpp" ]

  sources = ipc_sources + client_sources

  public_configs = [
    ":avsession_client_config",
    "../../../services/session:avsession_ipc_config",
  ]

  public_deps = [
    "../../../utils:avsession_utils",
    "../../common:avsession_common",
  ]

  deps = [
    "../../../services/session:libidl_avsession_service_interface_stub",
    "../../../services/session:libidl_avsession_service_interface_proxy",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:wantagent_innerkits",
    "audio_framework:audio_client",
    "c_utils:utils",
    "graphic_surface:surface",
    "hilog:libhilog",
    "image_framework:image_native",
    "input:libmmi-client",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  cflags = []

  if (multimedia_av_session_enable_trace_control) {
    cflags += [ "-DENBABLE_AVSESSION_TRACE_CONTROL" ]
    external_deps += [ "hitrace:hitrace_meter" ]
  }

  if (multimedia_av_session_enable_sysevent_control) {
    cflags += [ "-DENABLE_AVSESSION_SYSEVENT_CONTROL" ]
    external_deps += [ "hisysevent:libhisysevent" ]
  }

  innerapi_tags = [ "platformsdk" ]
  subsystem_name = "multimedia"
  part_name = "av_session"
}
