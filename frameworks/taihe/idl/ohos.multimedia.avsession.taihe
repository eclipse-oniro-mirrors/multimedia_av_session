/*
 * Copyright (C) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@!namespace("@ohos.multimedia.avsession")

@!sts_inject("""
import type { WantAgent } from '@ohos.app.ability.wantAgent';
import { ElementName } from 'bundleManager.ElementName';
import { BusinessError, ErrorCallback, AsyncCallback, Callback } from '@ohos.base';
import type image from '@ohos.multimedia.image';
import type audio from '@ohos.multimedia.audio';
import type media from '@ohos.multimedia.media';
import type Context from 'application.BaseContext';
import type hdrCapability from '@ohos.graphics.hdrCapability';

class MediaAVFileDescriptorImpl implements media.AVFileDescriptor {
  fd: double;
  offset: (double | undefined);
  length: (double | undefined);

  constructor(fd: int, offset: long, length: long) {
    this.fd = fd.toDouble();
    this.offset = offset.toDouble();
    this.length = length.toDouble();
  }
}

class MediaAVDataSrcDescriptorImpl implements media.AVDataSrcDescriptor {
  fileSize: double;
  callback: (buffer: ArrayBuffer, length: double, pos?: double) => double;

  constructor(fileSize: long) {
    this.fileSize = fileSize.toDouble();
    this.callback = (buffer: ArrayBuffer, length: double, pos?: double) => {
        return 0;
    };
  }

  OnData(buffer: ArrayBuffer, length: int, pos: long): void {
    if (this.callback != undefined) {
      this.callback(buffer, length.toDouble(), pos.toDouble());
    }
  }
}
""")